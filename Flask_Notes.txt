Routes:
# Every route has two parts:
1) HTTP method (GET, POST, PUT, PATCH, DELETE)
2) URL

from flask import Flask  # Import Flask to allow us to create our app
app = Flask(__name__)    # Create a new instance of the Flask class called "app"
@app.route('/')          # The "@" decorator associates this route with the function immediately following
def hello_world():
    return 'Hello World!'  # Return the string 'Hello World!' as a response

@app.route('/success')
def success():
    return "success"

@app.route('/hello/<name>') # for a route '/hello/____' anything after '/hello/' gets passed as a variable 'name'
def hello(name):
    print(name)
    return "Hello, " + name

@app.route('/users/<username>/<id>') # for a route '/users/____/____', two parameters in the url get passed as username and id
def show_user_profile(username, id):
    print(username)
    print(id)
    return "username: " + username + ", id: " + id


if __name__=="__main__":   # Ensure this file is being run directly and not from a different module
    app.run(debug=True)    # Run the app in debug mode.

Render Templates:
# put a *****templates***** folder the same level as the .py file we're running. (exactly the word templates)

from flask import Flask, render_template  # added render_template!
app = Flask(__name__)

@app.route('/')
def hello_world():
    # Instead of returning a string,
    # we'll return the result of the render_template method, passing in the name of our HTML file
    return render_template('index.html')

if __name__=="__main__":
    app.run(debug=True)

Passing data to the HTML:
from flask import Flask, render_template
app = Flask(__name__)
@app.route('/')
def index():
    return render_template("index.html", phrase="hello", times=5)	# notice the 2 new named arguments!
if __name__=="__main__":
    app.run(debug=True)

# {{ some variable }}
# {% some expression %}

<h3>My Flask Template</h3>
<p>Phrase: {{ phrase }}</p>
<p>Times: {{ times }}</p>

{% for x in range(0,times): %}
    <p>{{ phrase }}</p>
{% endfor %}

{% if phrase == "hello" %}
Â  <p>The phrase says hello</p>
{% endif %}

# What renders:
_______________________________________________________
My Flask Template

Phrase: hello

Times: 5

hello

hello

hello

hello

hello

The phrase says hello
________________________________________________________

Static Content:
# must have the directory ***static***
# accessing the files from the static folder:
<!-- linking a css style sheet -->
<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='my_style.css') }}">
<!-- linking a javascript file -->
<script type="text/javascript" src="{{ url_for('static', filename='my_script.js') }}"></script>
<!-- linking an image -->
<img src="{{ url_for('static', filename='my_img.png') }}">

# if extra folders are created inside of the static foler i.e. css, img, js
<!-- linking a css style sheet -->
<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/my_style.css') }}">
<!-- linking a javascript file -->
<script type="text/javascript" src="{{ url_for('static', filename='js/my_script.js') }}"></script>
<!-- linking an image -->
<img src="{{ url_for('static', filename='img/my_img.png') }}">

_________________________________________________________

#passing lists to Jinja:
@app.route('/lists')
def render_lists():
    # Soon enough, we'll get data from a database, but for now, we're hard coding data
    student_info = [
       {'name' : 'Michael', 'age' : 35},
       {'name' : 'John', 'age' : 30 },
       {'name' : 'Mark', 'age' : 25},
       {'name' : 'KB', 'age' : 27}
    ]
    return render_template("lists.html", random_numbers = [3,1,5], students = student_info)


#HTML
    <h1>Random Numbers</h1>
    {% for number in random_numbers %}
        <p>{{ number }}</p>
    {% endfor %}
    <h1>Students</h1>
    {% for student in students %}
        <p>{{ student['name'] }} - {{ student['age'] }}</p>
    {% endfor %}
